#!/usr/bin/env python

import npyscreen
import os
import threading
import humanize
import sys

r = True
class SizeThread(threading.Thread):
    def __init__(self, *args, **kwargs):
        threading.Thread.__init__(self, *args, **kwargs)
        self.total_size = 0
        self.files_scanned = 0
    def run(self):
        global r
        for dirpath, dirnames, filenames in os.walk(sys.argv[1]):
             if not r:
                break
             for f in filenames:
                if not r:
                    break
                self.files_scanned += 1
                fp = os.path.join(dirpath, f)
                try:
                    self.total_size += os.path.getsize(fp)
                except OSError:
                    continue

class TestForm(npyscreen.Form):
    def create(self):
        self.myFixedText = self.add(npyscreen.TitleFixedText,
                                    name="Size",
                                    editable=False)
        self.myFixedText.value = '1'
        self.add_event_hander("TESTEVENT", self.ev_test_event_handler)
        self.total_size = 0
        self.s = SizeThread()
        self.s.start()

    def ev_test_event_handler(self, event):
        self.myFixedText.value = "%s (%s files scanned)" % (
            humanize.filesize.naturalsize(self.s.total_size),
            humanize.number.intcomma(self.s.files_scanned))
        self.myFixedText.display()

    def while_waiting(self):
        self.parentApp.queue_event(npyscreen.Event("TESTEVENT"))


class EventApp(npyscreen.StandardApp):
    def onStart(self):
        self.addForm("MAIN", TestForm)

if __name__ == '__main__':
    directory = sys.argv[1]
    try:
        EventApp().run()
    except KeyboardInterrupt:
        r = False
